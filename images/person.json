{"code":0,"msg":null,"data":{"id":18,"title":"Spring Boot+SQL/JPA实战悲观锁和乐观锁","created":"2018-12-17T14:48:01.000+0000","modified":"2019-04-26T04:03:38.000+0000","content":"<p>最近在公司的业务上遇到了并发的问题，并且还是很常见的并发问题，算是低级的失误了。由于公司业务相对比较复杂且不适合公开，在此用一个很常见的业务来还原一下场景，同时介绍悲观锁和乐观锁是如何解决这类并发问题的。</p>\n<p>公司业务就是最常见的“订单+账户”问题，在解决完公司问题后，转头一想，我的博客项目<a href=\"https://github.com/zzzzbw/Fame\">Fame</a>中也有同样的问题(虽然访问量根本完全不需要考虑并发问题...)，那我就拿这个来举例好了。</p>\n<!--read more-->\n<h3>业务还原</h3>\n<p>首先环境是：Spring Boot 2.1.0 + data-jpa + mysql + lombok</p>\n<h4>数据库设计</h4>\n<p>对于一个有评论功能的博客系统来说，通常会有两个表：1.文章表 2.评论表。其中文章表除了保存一些文章信息等，还有个字段保存评论数量。我们设计一个最精简的表结构来还原该业务场景。</p>\n<p><strong>article 文章表</strong></p>\n<table>\n<thead>\n<tr><th>字段</th><th>类型</th><th>备注</th></tr>\n</thead>\n<tbody>\n<tr><td>id</td><td>INT</td><td>自增主键id</td></tr>\n<tr><td>title</td><td>VARCHAR</td><td>文章标题</td></tr>\n<tr><td>comment_count</td><td>INT</td><td>文章的评论数量</td></tr>\n</tbody>\n</table>\n<p><strong>comment 评论表</strong></p>\n<table>\n<thead>\n<tr><th>字段</th><th>类型</th><th>备注</th></tr>\n</thead>\n<tbody>\n<tr><td>id</td><td>INT</td><td>自增主键id</td></tr>\n<tr><td>article_id</td><td>INT</td><td>评论的文章id</td></tr>\n<tr><td>content</td><td>VARCHAR</td><td>评论内容</td></tr>\n</tbody>\n</table>\n<p>当一个用户评论的时候，1. 根据文章id获取到文章 2. 插入一条评论记录 3. 该文章的评论数增加并保存</p>\n<!--read more-->\n<h4>代码实现</h4>\n<p>首先在maven中引入对应的依赖</p>\n<pre><code class=\"language-xml\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<p>然后编写对应数据库的实体类</p>\n<pre><code class=\"language-java\">@Data\n@Entity\npublic class Article {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String title;\n\n    private Long commentCount;\n}\n</code></pre>\n<pre><code class=\"language-java\">@Data\n@Entity\npublic class Comment {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long articleId;\n\n    private String content;\n}\n</code></pre>\n<p>接着创建这两个实体类对应的Repository，由于spring-jpa-data的<code>CrudRepository</code>已经帮我们实现了最常见的CRUD操作，所以我们的Repository只需要继承<code>CrudRepository</code>接口其他啥都不用做。</p>\n<pre><code class=\"language-java\">public interface ArticleRepository extends CrudRepository&lt;Article, Long&gt; {\n}\n</code></pre>\n<pre><code class=\"language-java\">public interface CommentRepository extends CrudRepository&lt;Comment, Long&gt; {\n}\n</code></pre>\n<p>接着我们就简单的实现一下Controller接口和Service实现类。</p>\n<pre><code class=\"language-java\">@Slf4j\n@RestController\npublic class CommentController {\n\n    @Autowired\n    private CommentService commentService;\n\n    @PostMapping(&quot;comment&quot;)\n    public String comment(Long articleId, String content) {\n        try {\n            commentService.postComment(articleId, content);\n        } catch (Exception e) {\n            log.error(&quot;{}&quot;, e);\n            return &quot;error: &quot; + e.getMessage();\n        }\n        return &quot;success&quot;;\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">@Slf4j\n@Service\npublic class CommentService {\n    @Autowired\n    private ArticleRepository articleRepository;\n\n    @Autowired\n    private CommentRepository commentRepository;\n\n    public void postComment(Long articleId, String content) {\n        Optional&lt;Article&gt; articleOptional = articleRepository.findById(articleId);\n        if (!articleOptional.isPresent()) {\n            throw new RuntimeException(&quot;没有对应的文章&quot;);\n        }\n        Article article = articleOptional.get();\n\n        Comment comment = new Comment();\n        comment.setArticleId(articleId);\n        comment.setContent(content);\n        commentRepository.save(comment);\n\n        article.setCommentCount(article.getCommentCount() + 1);\n        articleRepository.save(article);\n    }\n}\n</code></pre>\n<h4>并发问题分析</h4>\n<p>从刚才的代码实现里可以看出这个简单的评论功能的流程，当用户发起评论的请求时，从数据库找出对应的文章的实体类<code>Article</code>，然后根据文章信息生成对应的评论实体类<code>Comment</code>，并且插入到数据库中，接着增加该文章的评论数量，再把修改后的文章更新到数据库中，整个流程如下流程图。</p>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/顺序流程.png\" alt=\"顺序流程\" /></p>\n<p><strong>在这个流程中有个问题，当有多个用户同时并发评论时，他们同时进入步骤1中拿到Article，然后插入对应的Comment，最后在步骤3中更新评论数量保存到数据库。只是由于他们是同时在步骤1拿到的Article，所以他们的Article.commentCount的值相同，那么在步骤3中保存的Article.commentCount+1也相同，那么原来应该+3的评论数量，只加了1。</strong></p>\n<p>我们用测试用例代码试一下</p>\n<pre><code class=\"language-java\">@RunWith(SpringRunner.class)\n@SpringBootTest(classes = LockAndTransactionApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class CommentControllerTests {\n    @Autowired\n    private TestRestTemplate testRestTemplate;\n\n    @Test\n    public void concurrentComment() {\n        String url = &quot;http://localhost:9090/comment&quot;;\n        for (int i = 0; i &lt; 100; i++) {\n            int finalI = i;\n            new Thread(() -&gt; {\n                MultiValueMap&lt;String, String&gt; params = new LinkedMultiValueMap&lt;&gt;();\n                params.add(&quot;articleId&quot;, &quot;1&quot;);\n                params.add(&quot;content&quot;, &quot;测试内容&quot; + finalI);\n                String result = testRestTemplate.postForObject(url, params, String.class);\n            }).start();\n        }\n\n    }\n}\n</code></pre>\n<p>这里我们开了100个线程，同时发送评论请求，对应的文章id为1。</p>\n<p>在发送请求前，数据库数据为</p>\n<pre><code class=\"language-sql\">select * from article\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/article-0.png\" alt=\"article-0\" /></p>\n<pre><code class=\"language-sql\">select count(*) comment_count from comment\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/comment-count-0.png\" alt=\"comment-count-0\" /></p>\n<p>发送请求后，数据库数据为</p>\n<pre><code class=\"language-sql\">select * from article\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/article-1.png\" alt=\"article-1\" /></p>\n<pre><code class=\"language-sql\">select count(*) comment_count from comment\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/comment-count-1.png\" alt=\"comment-count-1\" /></p>\n<p>明显的看到在article表里的comment_count的值不是100，这个值不一定是我图里的14，但是必然是不大于100的，而comment表的数量肯定等于100。</p>\n<p>这就展示了在文章开头里提到的并发问题，这种问题其实十分的常见，只要有类似上面这样评论功能的流程的系统，都要小心避免出现这种问题。</p>\n<blockquote>\n<p><strong>下面就用实例展示展示如何通过悲观锁和乐观锁防止出现并发数据问题，同时给出SQL方案和JPA自带方案，SQL方案可以通用“任何系统”，甚至不限语言，而JPA方案十分快捷，如果你恰好用的也是JPA，那就可以简单的使用上乐观锁或悲观锁。最后也会根据业务比较一下乐观锁和悲观锁的一些区别</strong></p>\n</blockquote>\n<h3>悲观锁解决并发问题</h3>\n<p>悲观锁顾名思义就是悲观的认为自己操作的数据都会被其他线程操作，所以就必须自己独占这个数据，可以理解为”独占锁“。在java中<code>synchronized</code>和<code>ReentrantLock</code>等锁就是悲观锁，数据库中表锁、行锁、读写锁等也是悲观锁。</p>\n<h4>利用SQL解决并发问题</h4>\n<p>行锁就是操作数据的时候把这一行数据锁住，其他线程想要读写必须等待，但同一个表的其他数据还是能被其他线程操作的。只要在需要查询的sql后面加上<code>for update</code>，就能锁住查询的行，<strong>特别要注意查询条件必须要是索引列，如果不是索引就会变成表锁，把整个表都锁住。</strong></p>\n<p>现在在原有的代码的基础上修改一下，先在<code>ArticleRepository</code>增加一个手动写sql查询方法。</p>\n<pre><code class=\"language-java\">public interface ArticleRepository extends CrudRepository&lt;Article, Long&gt; {\n    @Query(value = &quot;select * from article a where a.id = :id for update&quot;, nativeQuery = true)\n    Optional&lt;Article&gt; findArticleForUpdate(Long id);\n}\n</code></pre>\n<p>然后把<code>CommentService</code>中使用的查询方法由原来的<code>findById</code>改为我们自定义的方法</p>\n<pre><code class=\"language-java\">public class CommentService {\n    ...\n    \n    public void postComment(Long articleId, String content) {\n        // Optional&lt;Article&gt; articleOptional = articleRepository.findById(articleId);\n        Optional&lt;Article&gt; articleOptional = articleRepository.findArticleForUpdate(articleId);\n    \n    \t...\n    }\n}\n</code></pre>\n<p>这样我们查出来的<code>Article</code>，<strong>在我们没有将其提交事务之前，其他线程是不能获取修改的</strong>，保证了同时只有一个线程能操作对应数据。</p>\n<p>现在再用测试用例测一下，<code>article.comment_count</code>的值必定是100。</p>\n<h4>利用JPA自带行锁解决并发问题</h4>\n<p>对于刚才提到的在sql后面增加<code>for update</code>，JPA有提供一个更优雅的方式，就是<code>@Lock</code>注解，这个注解的参数可以传入想要的锁级别。</p>\n<p>现在在<code>ArticleRepository</code>中增加JPA的锁方法，其中<code>LockModeType.PESSIMISTIC_WRITE</code>参数就是行锁。</p>\n<pre><code class=\"language-java\">public interface ArticleRepository extends CrudRepository&lt;Article, Long&gt; {\n    ...\n    \n    @Lock(value = LockModeType.PESSIMISTIC_WRITE)\n    @Query(&quot;select a from Article a where a.id = :id&quot;)\n    Optional&lt;Article&gt; findArticleWithPessimisticLock(Long id);\n}\n</code></pre>\n<p>同样的只要在<code>CommentService</code>里把查询方法改为<code>findArticleWithPessimisticLock()</code>，再测试用例测一下，肯定不会有并发问题。而且这时看一下控制台打印信息，发现实际上查询的sql还是加了<code>for update</code>，只不过是JPA帮我们加了而已。</p>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/sql-for-update.png\" alt=\"sql-for-update\" /></p>\n<h3>乐观锁解决并发问题</h3>\n<p>乐观锁顾名思义就是特别乐观，认为自己拿到的资源不会被其他线程操作所以不上锁，只是在插入数据库的时候再判断一下数据有没有被修改。所以悲观锁是限制其他线程，而乐观锁是限制自己，虽然他的名字有锁，但是实际上不算上锁，只是在最后操作的时候再判断具体怎么操作。</p>\n<blockquote>\n<p>乐观锁通常为版本号机制或者CAS算法</p>\n</blockquote>\n<h4>利用SQL实现版本号解决并发问题</h4>\n<p><strong>版本号机制就是在数据库中加一个字段当作版本号，比如我们加个字段version。那么这时候拿到<code>Article</code>的时候就会带一个版本号，比如拿到的版本是1，然后你对这个<code>Article</code>一通操作，操作完之后要插入到数据库了。发现哎呀，怎么数据库里的<code>Article</code>版本是2，和我手里的版本不一样啊，说明我手里的<code>Article</code>不是最新的了，那么就不能放到数据库了。这样就避免了并发时数据冲突的问题。</strong></p>\n<p>所以我们现在给article表加一个字段version</p>\n<p><strong>article 文章表</strong></p>\n<table>\n<thead>\n<tr><th>字段</th><th>类型</th><th>备注</th></tr>\n</thead>\n<tbody>\n<tr><td>version</td><td>INT DEFAULT 0</td><td>版本号</td></tr>\n</tbody>\n</table>\n<p>然后对应的实体类也增加version字段</p>\n<pre><code class=\"language-java\">@Data\n@Entity\npublic class Article {\n\t...\n    \n    private Long version;\n}\n</code></pre>\n<p>接着在<code>ArticleRepository</code>增加更新的方法，注意这里是更新方法，和悲观锁时增加查询方法不同。</p>\n<pre><code class=\"language-java\">public interface ArticleRepository extends CrudRepository&lt;Article, Long&gt; {\n    @Modifying\n    @Query(value = &quot;update article set comment_count = :commentCount, version = version + 1 where id = :id and version = :version&quot;, nativeQuery = true)\n    int updateArticleWithVersion(Long id, Long commentCount, Long version);\n}\n</code></pre>\n<p>可以看到update的where有一个判断version的条件，并且会set version = version + 1。这就保证了只有当数据库里的版本号和要更新的实体类的版本号相同的时候才会更新数据。</p>\n<p>接着在<code>CommentService</code>里稍微修改一下代码。</p>\n<pre><code class=\"language-java\">// CommentService\npublic void postComment(Long articleId, String content) {\n    Optional&lt;Article&gt; articleOptional = articleRepository.findById(articleId);\n\n    ...\t\n\n    int count = articleRepository.updateArticleWithVersion(article.getId(), article.getCommentCount() + 1, article.getVersion());\n    if (count == 0) {\n        throw new RuntimeException(&quot;服务器繁忙,更新数据失败&quot;);\n    }\n    // articleRepository.save(article);\n}\n</code></pre>\n<p>首先对于<code>Article</code>的查询方法只需要普通的<code>findById()</code>方法就行不用上任何锁。</p>\n<p>然后更新<code>Article</code>的时候改用新加的<code>updateArticleWithVersion()</code>方法。可以看到这个方法有个返回值，这个返回值代表更新了的数据库行数，如果值为0的时候表示没有符合条件可以更新的行。</p>\n<p>这之后就可以由我们自己决定怎么处理了，<strong>这里是直接回滚，spring就会帮我们回滚之前的数据操作，把这次的所有操作都取消以保证数据的一致性</strong>。</p>\n<p>现在再用测试用例测一下</p>\n<pre><code class=\"language-sql\">select * from article\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/article-2.png\" alt=\"article-2\" /></p>\n<pre><code class=\"language-sql\">select count(*) comment_count from comment\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/comment-count-2.png\" alt=\"comment-count-2\" /></p>\n<p>现在看到<code>Article</code>里的comment_count和<code>Comment</code>的数量都不是100了，<strong>但是这两个的值必定是一样的了</strong>。因为刚才我们处理的时候假如<code>Article</code>表的数据发生了冲突，那么就不会更新到数据库里，这时抛出异常使其事务回滚，这样就能保证没有更新<code>Article</code>的时候<code>Comment</code>也不会插入，就解决了数据不统一的问题。</p>\n<p>这种直接回滚的处理方式用户体验比较差，通常来说如果判断<code>Article</code>更新条数为0时，会尝试重新从数据库里查询信息并重新修改，再次尝试更新数据，如果不行就再查询，直到能够更新为止。当然也不会是无线的循环这样的操作，会设置一个上线，比如循环3次查询修改更新都不行，这时候才会抛出异常。</p>\n<h4>利用JPA实现版本现解决并发问题</h4>\n<p>JPA对悲观锁有实现方式，乐观锁自然也是有的，现在就用JPA自带的方法实现乐观锁。</p>\n<p>首先在<code>Article</code>实体类的version字段上加上<code>@Version</code>注解，我们进注解看一下源码的注释，可以看到有部分写到:</p>\n<blockquote>\n<p>The following types are supported for version properties: int, Integer, short, Short, long, Long, java.sql.Timestamp.</p>\n</blockquote>\n<p>注释里面说版本号的类型支持int, short, long三种基本数据类型和他们的包装类以及Timestamp，我们现在用的是Long类型。</p>\n<pre><code class=\"language-java\">@Data\n@Entity\npublic class Article {\n    ...\n    \n    @Version\n    private Long version;\n}\n</code></pre>\n<p>接着只需要在<code>CommentService</code>里的评论流程修改回我们最开头的“会触发并发问题”的业务代码就行了。说明JPA的这种乐观锁实现方式是非侵入式的。</p>\n<pre><code class=\"language-java\">// CommentService\npublic void postComment(Long articleId, String content) {\n    Optional&lt;Article&gt; articleOptional = articleRepository.findById(articleId);\n    ...\n\n    article.setCommentCount(article.getCommentCount() + 1);\n    articleRepository.save(article);\n}\n</code></pre>\n<p>和前面同样的，用测试用例测试一下能否防止并发问题的出现。</p>\n<pre><code class=\"language-sql\">select * from article\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/article-3.png\" alt=\"article-3\" /></p>\n<pre><code class=\"language-sql\">select count(*) comment_count from comment\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/comment-count-3.png\" alt=\"comment-count-3\" /></p>\n<p>同样的<code>Article</code>里的comment_count和<code>Comment</code>的数量也不是100，但是这两个数值肯定是一样的。看一下IDEA的控制台会发现系统抛出了<code>ObjectOptimisticLockingFailureException</code>的异常。</p>\n<p><img src=\"https://raw.githubusercontent.com/zzzzbw/blog_source/master/images/LockAndTransaction/exception.png\" alt=\"exception\" /></p>\n<p>这和刚才我们自己实现乐观锁类似，如果没有成功更新数据则抛出异常回滚保证数据的一致性。如果想要实现重试流程可以捕获<code>ObjectOptimisticLockingFailureException</code>这个异常，通常会利用AOP+自定义注解来实现一个全局通用的重试机制，这里就是要根据具体的业务情况来拓展了，想要了解的可以自行搜索一下方案。</p>\n<h3>悲观锁和乐观锁比较</h3>\n<p><strong>悲观锁适合写多读少的场景</strong>。因为在使用的时候该线程会独占这个资源，在本文的例子来说就是某个id的文章，如果有大量的评论操作的时候，就适合用悲观锁，否则用户只是浏览文章而没什么评论的话，用悲观锁就会经常加锁，增加了加锁解锁的资源消耗。</p>\n<p><strong>乐观锁适合写少读多的场景</strong>。由于乐观锁在发生冲突的时候会回滚或者重试，如果写的请求量很大的话，就经常发生冲突，经常的回滚和重试，这样对系统资源消耗也是非常大。</p>\n<p><strong>所以悲观锁和乐观锁没有绝对的好坏</strong>，必须结合具体的业务情况来决定使用哪一种方式。另外在阿里巴巴开发手册里也有提到：</p>\n<blockquote>\n<p>如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次 数不得小于 3 次。</p>\n</blockquote>\n<p>阿里巴巴建议以冲突概率20%这个数值作为分界线来决定使用乐观锁和悲观锁，虽然说这个数值不是绝对的，但是作为阿里巴巴各个大佬总结出来的也是一个很好的参考。</p>\n","authorId":1,"hits":391,"tags":"Java,并发","category":"Spring Boot","status":"publish","type":"post","allowComment":false,"commentCount":0},"success":true}